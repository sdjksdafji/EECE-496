package com.eece496.webapp.jdbcdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.eece496.webapp.dao.HolddateDAO;
import com.eece496.webapp.jdbcdao.mapper.HoldDateMapper;
import com.eece496.webapp.pojo.HoldDate;
import com.eece496.webapp.pojo.Mark;
import com.eece496.webapp.pojo.Student;
import com.eece496.webapp.pojo.Ta;

@Named
public class HolddateJdbcDAO implements HolddateDAO {
	
	@Inject
	private JdbcTemplate jdbcTemplate;
	
	@Inject
	private HoldDateMapper holdDateMapper;

	@Override
	public boolean addHolddate(HoldDate holddate, int subsectionId) {
		final String INSERT_SQL = "insert into hold_dates (date, ta_id, student_id, absent_student_id, subsection_id, student_absent, approved_absent, question) values(?, ?, ?, ?, ?, ?, ?, ?)";
		long autoGeneratedKey = -1;
		final HoldDate _holddate = holddate;
		final int _subsectionId = subsectionId;
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			this.jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							INSERT_SQL, new String[] { "id" });
					ps.setDate(1, new java.sql.Date(_holddate.getDate().getDate()));
					if(_holddate.getTa() == null){
						ps.setNull(2, java.sql.Types.INTEGER);
					}else{
						ps.setInt(2, _holddate.getTa().getId());
					}
					if(_holddate.getStudent() == null){
						ps.setNull(3, java.sql.Types.INTEGER);
					}else{
						ps.setInt(3, _holddate.getStudent().getId());
					}
					if(_holddate.getAbsentStudent() == null){
						ps.setNull(4, java.sql.Types.INTEGER);
					}else{
						ps.setInt(4, _holddate.getAbsentStudent().getId());
					}
					ps.setInt(5, _subsectionId);
					ps.setBoolean(6, _holddate.getStudentAbsent());
					ps.setBoolean(7, _holddate.getApprovedAbsent());
					ps.setString(8, _holddate.getQuestion());
					return ps;
				}
			}, keyHolder);
			autoGeneratedKey=  (Long) keyHolder.getKey();
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		holddate.setId((int)autoGeneratedKey);
		return true;
	}

	@Override
	public HoldDate getHolddate(int holddateId) {
		HoldDate holdDate = null;
		final String SQL_QUERY = "select * from hold_dates where id = ?";
		try {
			holdDate = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { holddateId }, this.holdDateMapper);
		} catch (Exception ex) {
		}
		return holdDate;
	}

	@Override
	public List<HoldDate> getHolddateOfSubsection(int subSectionId) {
		List<HoldDate> holdDateList = new ArrayList<HoldDate>();
		final String SQL_QUERY = "select * from hold_dates where subsection_id = ?";
		try{	
			holdDateList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { subSectionId }, this.holdDateMapper);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return holdDateList;
	}

	@Override
	public boolean updateHolddate(HoldDate holddate) {
		final String SQL_QUERY = "update hold_dates set date = ?, student_absent = ?, approved_absent = ?, question = ? where id = ?";
		try {
			this.jdbcTemplate.update(SQL_QUERY,
					holddate.getDate(), holddate.getStudentAbsent(), holddate.getApprovedAbsent(),holddate.getQuestion(),holddate.getId());
		} catch (Exception sqlEx) {
			sqlEx.printStackTrace();
			return false;
		}
		if(this.updateHoldDateStudent(holddate.getStudent(), holddate.getId()) == false){
			return false;
		}
		if(this.updateHoldDateTa(holddate.getTa(), holddate.getId()) == false){
			return false;
		}
		if(this.updateHoldDateAbsentStudent(holddate.getAbsentStudent(), holddate.getId()) == false){
			return false;
		}
		return true;
	}

	@Override
	public boolean deleteHolddate(int holdDateId) {
		final String DELETE_SQL = "delete from hold_dates where id = ?";
		try {
			this.jdbcTemplate.update(DELETE_SQL, holdDateId);
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		return true;
	}
	
	public boolean updateHoldDateTa(Ta ta, int holdDateId) {
		if (ta == null) {
			final String SQL_QUERY = "update hold_dates set ta_id = NULL where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		} else {
			final String SQL_QUERY = "update hold_dates set ta_id = ? where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, ta.getId(), holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		}
		return true;
	}
	
	public boolean updateHoldDateStudent(Student student, int holdDateId){
		if (student == null) {
			final String SQL_QUERY = "update hold_dates set student_id = NULL where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		} else {
			final String SQL_QUERY = "update hold_dates set student_id = ? where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, student.getId(), holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		}
		return true;
	}
	
	public boolean updateHoldDateAbsentStudent(Student absentStudent, int holdDateId){
		if (absentStudent == null) {
			final String SQL_QUERY = "update hold_dates set absent_student_id = NULL where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		} else {
			final String SQL_QUERY = "update hold_dates set absent_student_id = ? where id = ?";
			try {
				this.jdbcTemplate.update(SQL_QUERY, absentStudent.getId(), holdDateId);
			} catch (Exception ex) {
				ex.printStackTrace();
				return false;
			}
		}
		return true;
	}

	@Override
	public HoldDate getEarliestDateOfStudent(int studentId, int SectionId,
			java.util.Date afterDate) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");//System.out.println(dateFormat.format(afterDate));
		HoldDate holdDate = null;
		final String SQL_QUERY = "select h.* from hold_dates h, subsections sub where h.subsection_id = sub.id and sub.section_id = ? and student_id = ? and h.date > STR_TO_DATE(?, '%Y-%m-%d') order by date asc limit 1";
		try {
			holdDate = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { SectionId, studentId, dateFormat.format(afterDate) },
					this.holdDateMapper);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return holdDate;
	}

	@Override
	public HoldDate getLatestDateOfStudent(int studentId, int SectionId) {
		HoldDate holdDate = null;
		final String SQL_QUERY = "select h.* from hold_dates h, subsections sub where h.subsection_id = sub.id and sub.section_id = ? and student_id = ? order by date desc limit 1";
		try {
			holdDate = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { SectionId, studentId }, this.holdDateMapper);
		} catch (Exception ex) {
		}
		return holdDate;
	}

}
