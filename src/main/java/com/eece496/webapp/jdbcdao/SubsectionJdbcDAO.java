package com.eece496.webapp.jdbcdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.eece496.webapp.dao.SubsectionDAO;
import com.eece496.webapp.jdbcdao.mapper.SubsectionMapper;
import com.eece496.webapp.pojo.Subsection;
import com.eece496.webapp.pojo.User;

@Named
public class SubsectionJdbcDAO implements SubsectionDAO {
	@Inject
	private JdbcTemplate jdbcTemplate;
	
	@Inject
	private SubsectionMapper subsectionMapper;

	@Override
	public boolean addSubsection(Subsection subsection, int sectionId) {
		final String INSERT_SQL = "insert into subsections (start_time, end_time, section_id) values(?, ?, ?)";
		long autoGeneratedKey = -1;
		final Subsection _sub = subsection;
		final int _sectionId = sectionId;
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			this.jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							INSERT_SQL, new String[] { "id" });
					ps.setTime(1, new java.sql.Time(_sub.getStartTime().getTime()));
					ps.setTime(2, new java.sql.Time(_sub.getEndTime().getTime()));
					ps.setInt(3, _sectionId);
					return ps;
				}
			}, keyHolder);
			autoGeneratedKey=  (Long) keyHolder.getKey();
		} catch (Exception ex) {
			System.out.println(ex);
			return false;
		}
		subsection.setId((int)autoGeneratedKey);
		return true;
	}
	

	@Override
	public boolean deleteSubsection(int subsectionId) {
		final String DELETE_SQL = "delete from subsections where id = ?";
		try {
			this.jdbcTemplate.update(DELETE_SQL, subsectionId);
		} catch (Exception ex) {
			return false;
		}
		return true;
	}

	@Override
	public Subsection getIndividualSubsection(int subsectionId) {
		Subsection sub = null;
		final String SQL_QUERY = "select sub.id, sub.start_time, sub.end_time, s.room from subsections sub, sections s where sub.section_id = s.id and sub.id = ?";
		try {
			sub = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { subsectionId }, subsectionMapper);
		} catch (Exception sqlEx) {
		}
		return sub;
	}

	@Override
	public List<Subsection> getSubsection(int sectionId) {
		List<Subsection> subList = new ArrayList<Subsection>();
		final String SQL_QUERY = "select sub.id, sub.start_time, sub.end_time, s.room from subsections sub, sections s where sub.section_id = s.id and s.id = ?";
		try {
			subList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { sectionId }, subsectionMapper);
		} catch (Exception sqlEx) {
		}
		return subList;
	}


	@Override
	public boolean updateSection(Subsection subsection) {
		final String SQL_QUERY = "update subsections set start_time = ?, end_time = ? where id = ?";
		try {
			this.jdbcTemplate.update(SQL_QUERY,
					new Time(subsection.getStartTime().getTime()), new Time(subsection.getStartTime().getTime()), subsection.getId());
		} catch (Exception sqlEx) {
			return false;
		}
		return true;
	}

	@Override
	public boolean cleanSubsection() {
		final String DELETE_SQL = "delete from subsections";
		try {
			this.jdbcTemplate.update(DELETE_SQL);
		} catch (Exception ex) {
			return false;
		}
		return true;
	}

}
