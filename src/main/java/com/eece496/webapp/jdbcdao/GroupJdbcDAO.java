package com.eece496.webapp.jdbcdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.eece496.webapp.dao.GroupDAO;
import com.eece496.webapp.jdbcdao.mapper.CourseMapper;
import com.eece496.webapp.jdbcdao.mapper.GroupMapper;
import com.eece496.webapp.pojo.Group;
import com.eece496.webapp.pojo.Mark;

@Named
public class GroupJdbcDAO implements GroupDAO {
	
	@Inject
	private JdbcTemplate jdbcTemplate;

	@Override
	public List<Group> getGroup(int courseId) {
		List<Group> groupList = new ArrayList<Group>();
		final String SQL_QUERY = "select g.id from groups g, sections s where g.section_id = s.id and s.course_id = ?";
		try {
			groupList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { courseId }, new GroupMapper());
		} catch (Exception sqlEx) {

		}
		return groupList;
	}

	@Override
	public List<Group> getGroupOfSection(int sectionId) {
		List<Group> groupList = new ArrayList<Group>();
		final String SQL_QUERY = "select g.id from groups g where g.section_id = ?";
		try {
			groupList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { sectionId }, new GroupMapper());
		} catch (Exception sqlEx) {

		}
		return groupList;
	}

	@Override
	public List<Group> getGroupOfSubsection(int subsectionId) {
		List<Group> groupList = new ArrayList<Group>();
		final String SQL_QUERY = "select g.id from groups g, sections s, subsections sub where g.section_id = s.id and s.id = sub.section_id and sub.id = ?";
		try {
			groupList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { subsectionId }, new GroupMapper());
		} catch (Exception sqlEx) {

		}
		return groupList;
	}

	@Override
	public Group getIndividualGroup(int groupId) {
		Group group = null;
		final String SQL_QUERY = "select id from groups where id = ?";
		try {
			group = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { groupId }, new GroupMapper());
		} catch (Exception sqlEx) {

		}
		return group;
	}

	@Override
	public boolean addGroup(Group group, int sectionId) {
		final String INSERT_SQL = "insert into groups (section_id) values(?)";
		long autoGeneratedKey = -1;
		final int _sectionId = sectionId;
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			this.jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							INSERT_SQL, new String[] { "id" });
					ps.setInt(1, _sectionId);
					return ps;
				}
			}, keyHolder);
			autoGeneratedKey=  (Long) keyHolder.getKey();
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		group.setId((int)autoGeneratedKey);
		return true;
	}


	@Override
	public boolean deleteGroup(int groupId) {
		final String DELETE_SQL = "delete from groups where id = ?";
		try {
			this.jdbcTemplate.update(DELETE_SQL, groupId);
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		return true;
	}
	
	@Override
	public boolean cleanGroup() {
		final String DELETE_SQL = "delete from groups where";
		try {
			this.jdbcTemplate.update(DELETE_SQL);
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		return true;
	}


}
