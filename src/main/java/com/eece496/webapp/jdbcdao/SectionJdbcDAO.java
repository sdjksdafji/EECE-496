package com.eece496.webapp.jdbcdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.eece496.webapp.dao.SectionDAO;
import com.eece496.webapp.jdbcdao.mapper.GroupMapper;
import com.eece496.webapp.jdbcdao.mapper.SectionMapper;
import com.eece496.webapp.pojo.Mark;
import com.eece496.webapp.pojo.Section;

@Named
public class SectionJdbcDAO implements SectionDAO {
	@Inject
	private JdbcTemplate jdbcTemplate;

	@Override
	public Section getIndividualSection(int sectionId) {
		Section section = null;
		final String SQL_QUERY = "select * from sections where id = ?";
		try {
			section = this.jdbcTemplate.queryForObject(SQL_QUERY,
					new Object[] { sectionId }, new SectionMapper());
		} catch (Exception sqlEx) {

		}
		return section;
	}

	@Override
	public List<Section> getSection(int courseId) {
		List<Section> sectionList = new ArrayList<Section>();
		final String SQL_QUERY = "select * from sections where course_id = ?";
		try {
			sectionList = this.jdbcTemplate.query(SQL_QUERY,
					new Object[] { courseId }, new SectionMapper());
		} catch (Exception sqlEx) {

		}
		return sectionList;
	}

	@Override
	public boolean updateSection(Section section) {
		final String SQL_QUERY = "update sections set room = ?, start_time = ?, end_time = ? where id = ?";
		try {
			this.jdbcTemplate.update(SQL_QUERY,
					section.getRoom(), new Time(section.getStartTime().getTime()),new Time(section.getEndTime().getTime()), section.getId());
		} catch (Exception sqlEx) {
			return false;
		}
		return true;
	}

	@Override
	public boolean addSection(Section section, int courseId) {
		final String INSERT_SQL = "insert into sections (room, start_time, end_time, course_id) values(?, ?, ?, ?)";
		long autoGeneratedKey = -1;
		final Section _section = section;
		final int _courseId = courseId;
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			this.jdbcTemplate.update(new PreparedStatementCreator() {
				public PreparedStatement createPreparedStatement(
						Connection connection) throws SQLException {
					PreparedStatement ps = connection.prepareStatement(
							INSERT_SQL, new String[] { "id" });
					ps.setString(1, _section.getRoom());
					Time startTime = new Time(_section.getStartTime().getTime());
					ps.setTime(2, startTime);
					Time endTime = new Time(_section.getEndTime().getTime());
					ps.setTime(3, endTime);
					ps.setInt(4, _courseId);
					return ps;
				}
			}, keyHolder);
			autoGeneratedKey=  (Long) keyHolder.getKey();
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		section.setId((int)autoGeneratedKey);
		return true;
	}

	@Override
	public boolean deleteSection(int sectionId) {
		final String DELETE_SQL = "delete from sections where id = ?";
		try {
			this.jdbcTemplate.update(DELETE_SQL, sectionId);
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		return true;
	}
	
	@Override
	public boolean cleanSection() {
		final String DELETE_SQL = "delete from sections";
		try {
			this.jdbcTemplate.update(DELETE_SQL);
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		return true;
	}

}
